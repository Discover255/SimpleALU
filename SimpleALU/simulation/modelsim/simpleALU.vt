// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/07/2017 22:35:01"
                                                                                
// Verilog Test Bench template for design : simpleALU
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module simpleALU_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [3:0] a;
reg [3:0] b;
reg ci;
reg m;
reg [1:0] s;
// wires                                               
wire co;
wire [3:0]  f;
wire g;
wire p;
wire [3:0]  virtualP;

// assign statements (if any)                          
simpleALU i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.ci(ci),
	.co(co),
	.f(f),
	.g(g),
	.m(m),
	.p(p),
	.s(s),
	.virtualP(virtualP)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin
b = 4'b1010;
a = 4'b0110;
ci = 0;
s = 0;
m = 0;

// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#10 s = s + 1;
#10 s = s + 1;
#10 s = s + 1;
#10 m = 1;s = 0;
#10 s = s + 1;
#10 s = s + 1;
#10 s = s + 1;
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

